The NV2A implements [https://www.opengl.org/registry/specs/NV/register_combiners.txt NV_register_combiners] (and [https://www.opengl.org/registry/specs/NV/register_combiners2.txt NV_register_combiners2]?).
Texturing modes are from:
https://www.khronos.org/registry/OpenGL/extensions/NV/NV_texture_shader.txt
https://www.khronos.org/registry/OpenGL/extensions/NV/NV_texture_shader2.txt
https://www.khronos.org/registry/OpenGL/extensions/NV/NV_texture_shader3.txt

== Data types ==

NV_texture_shader suggests that: ''"The 8-bit and 16-bit signed fixed-point types are used for signed internal texture formats, while the 9-bit signed fixed-point type is used for register combiners computations."''
Here is a table from the GL extension:

{| class="wikitable"
! floating-point !! 8-bit fixed-point !! 9-bit fixed-point !! 16 bit fixed-point
|-
|    1.0         ||     n/a           ||      255          ||      n/a  
|-
|    0.99996...  ||     n/a           ||      n/a          ||      32767
|-
|    0.99218...  ||     127           ||      n/a          ||      n/a  
|-
|    0.0         ||     0             ||      0            ||      0
|-
|   -1.0         ||    -128           ||     -255          ||     -32768
|-
|   -1.00392...  ||     n/a           ||     -256          ||      n/a
|}

== Texturing modes ==

{|class="wikitable"
!ID
!Name
!GL Name
!Stage 1
!Stage 2
!Stage 3
!Stage 4
!Notes
|-
|0x00
|PS_TEXTUREMODES_NONE<br>texcoord?{{citation needed}}
|NONE
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x01
|PS_TEXTUREMODES_PROJECT2D<br>tex
|TEXTURE_2D
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x02
|PS_TEXTUREMODES_PROJECT3D
|TEXTURE_3D
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x03
|PS_TEXTUREMODES_CUBEMAP
|TEXTURE_CUBE_MAP_ARB
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x04
|PS_TEXTUREMODES_PASSTHRU<br>texcoord?{{citation needed}}
|PASS_THROUGH_NV
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x05
|PS_TEXTUREMODES_CLIPPLANE<br>texkill
|CULL_FRAGMENT_NV
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x06
|PS_TEXTUREMODES_BUMPENVMAP<br>texbem
|OFFSET_TEXTURE_2D_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x07
|PS_TEXTUREMODES_BUMPENVMAP_LUM<br>texbeml
|OFFSET_TEXTURE_2D_SCALE_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x08
|PS_TEXTUREMODES_BRDF<br>texm3x2tex
|
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|
|-
|0x09
|PS_TEXTUREMODES_DOT_ST<br>texm3x2pad?{{citation needed}}
|DOT_PRODUCT_NV{{citation needed}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|
|-
|0x0A
|PS_TEXTUREMODES_DOT_ZW<br>texm3x2tex?{{citation needed}}
|DOT_PRODUCT_NV{{citation needed}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|
|-
|0x0B
|PS_TEXTUREMODES_DOT_RFLCT_DIFF
|DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV{{citation needed}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|
|-
|0x0C
|PS_TEXTUREMODES_DOT_RFLCT_SPEC
|DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV{{citation needed}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|-
|0x0D
|PS_TEXTUREMODES_DOT_STR_3D
|DOT_PRODUCT_TEXTURE_3D_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|-
|0x0E
|PS_TEXTUREMODES_DOT_STR_CUBE
|DOT_PRODUCT_REFLECT_CUBE_MAP_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|-
|0x0F
|PS_TEXTUREMODES_DPNDNT_AR<br>texreg2ar
|DEPENDENT_AR_TEXTURE_2D_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x10
|PS_TEXTUREMODES_DPNDNT_GB<br>texreg2gb
|DEPENDENT_GB_TEXTURE_2D_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x11
|PS_TEXTUREMODES_DOTPRODUCT
|DOT_PRODUCT_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|
|-
|0x12
|PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST
|DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|}

Also known from nvidia docs:
* texm3x3pad [stage 1, stage 2]
* texm3x3spec [stage 3]
* texm3x3vspec [stage 3]
* texm3x3tex [stage 3]

== Debugging ==

PIX from the Microsoft XDK provides great debugging capabilities.

== References and links ==

* http://developer.download.nvidia.com/assets/gamedev/docs/GDC2K1_DX8_Pixel_Shaders.pdf
* http://developer.download.nvidia.com/assets/gamedev/docs/ProgrammableTextureBlending.pdf