The NV2A implements at least parts of the following OpenGL extensions:

* [https://www.khronos.org/registry/OpenGL/extensions/NV/NV_texture_shader.txt NV_texture_shader]
* [https://www.khronos.org/registry/OpenGL/extensions/NV/NV_texture_shader2.txt NV_texture_shader2]
* [https://www.khronos.org/registry/OpenGL/extensions/NV/NV_texture_shader3.txt NV_texture_shader3]{{citation needed}}
* [https://www.opengl.org/registry/specs/NV/register_combiners.txt NV_register_combiners]
* [https://www.opengl.org/registry/specs/NV/register_combiners2.txt NV_register_combiners2]


== Data types ==

NV_texture_shader suggests that: ''"The 8-bit and 16-bit signed fixed-point types are used for signed internal texture formats, while the 9-bit signed fixed-point type is used for register combiners computations."''
Here is a table from the GL extension:

{| class="wikitable"
! floating-point !! 8-bit fixed-point !! 9-bit fixed-point !! 16-bit fixed-point
|-
|    1.0         ||     n/a           ||      255          ||      n/a  
|-
|    0.99996...  ||     n/a           ||      n/a          ||      32767
|-
|    0.99218...  ||     127           ||      n/a          ||      n/a  
|-
|    0.0         ||     0             ||      0            ||      0
|-
|   -1.0         ||    -128           ||     -255          ||     -32768
|-
|   -1.00392...  ||     n/a           ||     -256          ||      n/a
|}

This means:

* 8-bit fixed-point: [-128, 127] &rarr; [-128/128, 127/128] &rarr; [-1.0, 0.99218...]
* 9-bit fixed-point: [-256, 255] &rarr; [-256/255, 255/255] &rarr; [-1.00392..., 1.0]
* 16-bit fixed-point: [-32768, 32767] &rarr; [-32768/32768, 32767/32768] &rarr; [-1.0, 0.99996...]

It is not known if the NV2A really implements these 3 datatypes.
It is also not yet known how exactly conversion or negation of these types would work.

== Texturing modes ==

{|class="wikitable"
!ID
!Name
!D3D name
!GL Name
!Stage 1
!Stage 2
!Stage 3
!Stage 4
!Notes
|-
|0x00
|PS_TEXTUREMODES_NONE
|
|NONE
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x01
|PS_TEXTUREMODES_PROJECT2D
|tex
|TEXTURE_2D
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x02
|PS_TEXTUREMODES_PROJECT3D
|tex
|TEXTURE_3D
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x03
|PS_TEXTUREMODES_CUBEMAP
|tex
|TEXTURE_CUBE_MAP_ARB
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x04
|PS_TEXTUREMODES_PASSTHRU
|texcoord
|PASS_THROUGH_NV
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x05
|PS_TEXTUREMODES_CLIPPLANE
|texkill
|CULL_FRAGMENT_NV
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x06
|PS_TEXTUREMODES_BUMPENVMAP
|texbem
|OFFSET_TEXTURE_2D_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x07
|PS_TEXTUREMODES_BUMPENVMAP_LUM
|texbeml
|OFFSET_TEXTURE_2D_SCALE_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x08
|PS_TEXTUREMODES_BRDF
|texbrdf
|
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|
|-
|0x09
|PS_TEXTUREMODES_DOT_ST
|texm3x2tex
|DOT_PRODUCT_TEXTURE_2D_NV
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|
|-
|0x0A
|PS_TEXTUREMODES_DOT_ZW
|texm3x2depth
|
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|
|-
|0x0B
|PS_TEXTUREMODES_DOT_RFLCT_DIFF
|texm3x3diff
|DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV{{citation needed}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|
|-
|0x0C
|PS_TEXTUREMODES_DOT_RFLCT_SPEC
|texm3x3vspec
|DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|-
|0x0D
|PS_TEXTUREMODES_DOT_STR_3D
|texm3x3tex
|DOT_PRODUCT_TEXTURE_3D_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|-
|0x0E
|PS_TEXTUREMODES_DOT_STR_CUBE
|texm3x3vspec
|DOT_PRODUCT_REFLECT_CUBE_MAP_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|-
|0x0F
|PS_TEXTUREMODES_DPNDNT_AR
|texreg2ar
|DEPENDENT_AR_TEXTURE_2D_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x10
|PS_TEXTUREMODES_DPNDNT_GB
|texreg2gb
|DEPENDENT_GB_TEXTURE_2D_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|
|-
|0x11
|PS_TEXTUREMODES_DOTPRODUCT
|texm3x3pad<br>texm3x2pad
|DOT_PRODUCT_NV
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|
|-
|0x12
|PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST
|texm3x3spec
|DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|
|}

== Debugging ==

PIX from the Microsoft XDK provides great debugging capabilities.

== References and links ==

* [http://developer.download.nvidia.com/assets/gamedev/docs/ProgrammableTextureBlending.pdf Overview about programmable fragment shading] <!-- Mirror: https://www.nvidia.com/object/programmable_texture_blending.html -->
* [https://github.com/XboxDev/nxdk/blob/77b5de45f0c64e70f2ff68248873448d5edccc71/tools/fp20compiler/ps1.0_program.cpp#L227 Code from nvparse (NVIDIA SDK 9.52) in nxdk, which handles shader to OpenGL conversion]
* http://developer.download.nvidia.com/assets/gamedev/docs/GDC2K1_DX8_Pixel_Shaders.pdf

[[Category:NV2A]]